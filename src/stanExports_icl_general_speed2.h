// Generated by rstantools.  Do not edit by hand.

/*
    pandemic is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    pandemic is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with pandemic.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_icl_general_speed2_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_icl_general_speed2");
    reader.add_event(239, 237, "end", "model_icl_general_speed2");
    return reader;
}
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T6__, typename T7__, typename T8__, typename T9__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T6__, T7__, T8__, T9__>::type>::type, Eigen::Dynamic, 1> >
country_model(const T0__& mu_local,
                  const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& alpha,
                  const T2__& y_local,
                  const T3__& ifr_noise_local,
                  const int& N0,
                  const int& N2,
                  const Eigen::Matrix<T6__, Eigen::Dynamic, Eigen::Dynamic>& X_local,
                  const Eigen::Matrix<T7__, Eigen::Dynamic, 1>& SI_rev,
                  const T8__& pop_local,
                  const Eigen::Matrix<T9__, Eigen::Dynamic, 1>& f_rev_local, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T6__, T7__, T8__, T9__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 16;
        validate_non_negative_index("prediction", "N2", N2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> prediction(N2);
        stan::math::initialize(prediction, DUMMY_VAR__);
        stan::math::fill(prediction, DUMMY_VAR__);
        stan::math::assign(prediction,rep_vector(0.0, N2));
        current_statement_begin__ = 17;
        validate_non_negative_index("E_deaths", "N2", N2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> E_deaths(N2);
        stan::math::initialize(E_deaths, DUMMY_VAR__);
        stan::math::fill(E_deaths, DUMMY_VAR__);
        stan::math::assign(E_deaths,rep_vector(0.0, N2));
        current_statement_begin__ = 18;
        validate_non_negative_index("Rt", "N2", N2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> Rt(N2);
        stan::math::initialize(Rt, DUMMY_VAR__);
        stan::math::fill(Rt, DUMMY_VAR__);
        stan::math::assign(Rt,rep_vector(0.0, N2));
        current_statement_begin__ = 19;
        validate_non_negative_index("Rt_adj", "N2", N2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> Rt_adj(N2);
        stan::math::initialize(Rt_adj, DUMMY_VAR__);
        stan::math::fill(Rt_adj, DUMMY_VAR__);
        stan::math::assign(Rt_adj,rep_vector(0.0, N2));
        current_statement_begin__ = 20;
        validate_non_negative_index("cumm_sum", "N2", N2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> cumm_sum(N2);
        stan::math::initialize(cumm_sum, DUMMY_VAR__);
        stan::math::fill(cumm_sum, DUMMY_VAR__);
        stan::math::assign(cumm_sum,rep_vector(0.0, N2));
        current_statement_begin__ = 23;
        stan::model::assign(prediction, 
                    stan::model::cons_list(stan::model::index_min_max(1, N0), stan::model::nil_index_list()), 
                    rep_vector(y_local, N0), 
                    "assigning variable prediction");
        current_statement_begin__ = 24;
        stan::model::assign(cumm_sum, 
                    stan::model::cons_list(stan::model::index_min_max(2, N0), stan::model::nil_index_list()), 
                    cumulative_sum(stan::model::rvalue(prediction, stan::model::cons_list(stan::model::index_min_max(2, N0), stan::model::nil_index_list()), "prediction")), 
                    "assigning variable cumm_sum");
        current_statement_begin__ = 26;
        stan::math::assign(Rt, multiply(mu_local, stan::math::exp(multiply(minus(X_local), alpha))));
        current_statement_begin__ = 27;
        stan::model::assign(Rt_adj, 
                    stan::model::cons_list(stan::model::index_min_max(1, N0), stan::model::nil_index_list()), 
                    stan::model::rvalue(Rt, stan::model::cons_list(stan::model::index_min_max(1, N0), stan::model::nil_index_list()), "Rt"), 
                    "assigning variable Rt_adj");
        current_statement_begin__ = 29;
        for (int i = (N0 + 1); i <= N2; ++i) {
            {
            current_statement_begin__ = 30;
            local_scalar_t__ convolution(DUMMY_VAR__);
            (void) convolution;  // dummy to suppress unused var warning
            stan::math::initialize(convolution, DUMMY_VAR__);
            stan::math::fill(convolution, DUMMY_VAR__);
            stan::math::assign(convolution,dot_product(head(prediction, (i - 1)), tail(SI_rev, (i - 1))));
            current_statement_begin__ = 32;
            stan::model::assign(cumm_sum, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        (get_base1(cumm_sum, (i - 1), "cumm_sum", 1) + get_base1(prediction, (i - 1), "prediction", 1)), 
                        "assigning variable cumm_sum");
            current_statement_begin__ = 33;
            stan::model::assign(Rt_adj, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        (((pop_local - get_base1(cumm_sum, i, "cumm_sum", 1)) / pop_local) * get_base1(Rt, i, "Rt", 1)), 
                        "assigning variable Rt_adj");
            current_statement_begin__ = 34;
            stan::model::assign(prediction, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        (get_base1(Rt_adj, i, "Rt_adj", 1) * convolution), 
                        "assigning variable prediction");
            }
        }
        current_statement_begin__ = 37;
        stan::model::assign(E_deaths, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    (1e-15 * get_base1(prediction, 1, "prediction", 1)), 
                    "assigning variable E_deaths");
        current_statement_begin__ = 38;
        for (int i = 2; i <= N2; ++i) {
            current_statement_begin__ = 39;
            stan::model::assign(E_deaths, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        (ifr_noise_local * dot_product(head(prediction, (i - 1)), tail(f_rev_local, (i - 1)))), 
                        "assigning variable E_deaths");
        }
        current_statement_begin__ = 42;
        return stan::math::promote_scalar<fun_return_scalar_t__>(static_cast<std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > >(stan::math::array_builder<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> >().add(E_deaths).add(prediction).add(Rt).add(Rt_adj).array()));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct country_model_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T6__, typename T7__, typename T8__, typename T9__>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T6__, T7__, T8__, T9__>::type>::type, Eigen::Dynamic, 1> >
    operator()(const T0__& mu_local,
                  const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& alpha,
                  const T2__& y_local,
                  const T3__& ifr_noise_local,
                  const int& N0,
                  const int& N2,
                  const Eigen::Matrix<T6__, Eigen::Dynamic, Eigen::Dynamic>& X_local,
                  const Eigen::Matrix<T7__, Eigen::Dynamic, 1>& SI_rev,
                  const T8__& pop_local,
                  const Eigen::Matrix<T9__, Eigen::Dynamic, 1>& f_rev_local, std::ostream* pstream__) const {
        return country_model(mu_local, alpha, y_local, ifr_noise_local, N0, N2, X_local, SI_rev, pop_local, f_rev_local, pstream__);
    }
};
template <bool propto, typename T0__, typename T3__, typename T4__, typename T5__, typename T6__, typename T10__, typename T11__, typename T12__, typename T13__>
typename boost::math::tools::promote_args<T0__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T10__, T11__, T12__, typename boost::math::tools::promote_args<T13__>::type>::type>::type
country_lpdf(const std::vector<T0__>& mu_slice,
                 const int& start,
                 const int& end,
                 const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& alpha,
                 const std::vector<T4__>& y,
                 const T5__& phi,
                 const std::vector<T6__>& ifr_noise,
                 const std::vector<int>& N,
                 const int& N0,
                 const int& N2,
                 const std::vector<Eigen::Matrix<T10__, Eigen::Dynamic, Eigen::Dynamic> >& X,
                 const Eigen::Matrix<T11__, Eigen::Dynamic, 1>& SI_rev,
                 const std::vector<T12__>& pop,
                 const std::vector<Eigen::Matrix<T13__, Eigen::Dynamic, 1> >& f_rev,
                 const std::vector<std::vector<int> >& deaths,
                 const std::vector<int>& EpidemicStart, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T10__, T11__, T12__, typename boost::math::tools::promote_args<T13__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 66;
        local_scalar_t__ log_lik(DUMMY_VAR__);
        (void) log_lik;  // dummy to suppress unused var warning
        stan::math::initialize(log_lik, DUMMY_VAR__);
        stan::math::fill(log_lik, DUMMY_VAR__);
        stan::math::assign(log_lik,0.0);
        current_statement_begin__ = 68;
        for (int m = start; m <= end; ++m) {
            {
            current_statement_begin__ = 69;
            int m_slice(0);
            (void) m_slice;  // dummy to suppress unused var warning
            stan::math::fill(m_slice, std::numeric_limits<int>::min());
            stan::math::assign(m_slice,((m - start) + 1));
            current_statement_begin__ = 70;
            validate_non_negative_index("E_deaths", "N2", N2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> E_deaths(N2);
            stan::math::initialize(E_deaths, DUMMY_VAR__);
            stan::math::fill(E_deaths, DUMMY_VAR__);
            stan::math::assign(E_deaths,get_base1(country_model(get_base1(mu_slice, m_slice, "mu_slice", 1), alpha, get_base1(y, m, "y", 1), get_base1(ifr_noise, m, "ifr_noise", 1), N0, N2, get_base1(X, m, "X", 1), SI_rev, get_base1(pop, m, "pop", 1), get_base1(f_rev, m, "f_rev", 1), pstream__), 1, "country_model(get_base1(mu_slice, m_slice, \"mu_slice\", 1), alpha, get_base1(y, m, \"y\", 1), get_base1(ifr_noise, m, \"ifr_noise\", 1), N0, N2, get_base1(X, m, \"X\", 1), SI_rev, get_base1(pop, m, \"pop\", 1), get_base1(f_rev, m, \"f_rev\", 1), pstream__)", 1));
            current_statement_begin__ = 82;
            stan::math::assign(log_lik, (log_lik + neg_binomial_2_log(stan::model::rvalue(deaths, stan::model::cons_list(stan::model::index_min_max(get_base1(EpidemicStart, m, "EpidemicStart", 1), get_base1(N, m, "N", 1)), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), "deaths"), stan::model::rvalue(E_deaths, stan::model::cons_list(stan::model::index_min_max(get_base1(EpidemicStart, m, "EpidemicStart", 1), get_base1(N, m, "N", 1)), stan::model::nil_index_list()), "E_deaths"), phi)));
            }
        }
        current_statement_begin__ = 86;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_lik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T3__, typename T4__, typename T5__, typename T6__, typename T10__, typename T11__, typename T12__, typename T13__>
typename boost::math::tools::promote_args<T0__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T10__, T11__, T12__, typename boost::math::tools::promote_args<T13__>::type>::type>::type
country_lpdf(const std::vector<T0__>& mu_slice,
                 const int& start,
                 const int& end,
                 const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& alpha,
                 const std::vector<T4__>& y,
                 const T5__& phi,
                 const std::vector<T6__>& ifr_noise,
                 const std::vector<int>& N,
                 const int& N0,
                 const int& N2,
                 const std::vector<Eigen::Matrix<T10__, Eigen::Dynamic, Eigen::Dynamic> >& X,
                 const Eigen::Matrix<T11__, Eigen::Dynamic, 1>& SI_rev,
                 const std::vector<T12__>& pop,
                 const std::vector<Eigen::Matrix<T13__, Eigen::Dynamic, 1> >& f_rev,
                 const std::vector<std::vector<int> >& deaths,
                 const std::vector<int>& EpidemicStart, std::ostream* pstream__) {
    return country_lpdf<false>(mu_slice,start,end,alpha,y,phi,ifr_noise,N,N0,N2,X,SI_rev,pop,f_rev,deaths,EpidemicStart, pstream__);
}
struct country_lpdf_functor__ {
    template <bool propto, typename T0__, typename T3__, typename T4__, typename T5__, typename T6__, typename T10__, typename T11__, typename T12__, typename T13__>
        typename boost::math::tools::promote_args<T0__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T10__, T11__, T12__, typename boost::math::tools::promote_args<T13__>::type>::type>::type
    operator()(const std::vector<T0__>& mu_slice,
                 const int& start,
                 const int& end,
                 const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& alpha,
                 const std::vector<T4__>& y,
                 const T5__& phi,
                 const std::vector<T6__>& ifr_noise,
                 const std::vector<int>& N,
                 const int& N0,
                 const int& N2,
                 const std::vector<Eigen::Matrix<T10__, Eigen::Dynamic, Eigen::Dynamic> >& X,
                 const Eigen::Matrix<T11__, Eigen::Dynamic, 1>& SI_rev,
                 const std::vector<T12__>& pop,
                 const std::vector<Eigen::Matrix<T13__, Eigen::Dynamic, 1> >& f_rev,
                 const std::vector<std::vector<int> >& deaths,
                 const std::vector<int>& EpidemicStart, std::ostream* pstream__) const {
        return country_lpdf(mu_slice, start, end, alpha, y, phi, ifr_noise, N, N0, N2, X, SI_rev, pop, f_rev, deaths, EpidemicStart, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_icl_general_speed2 : public prob_grad {
private:
        int M;
        int P;
        int N0;
        std::vector<int> N;
        int N2;
        std::vector<std::vector<int> > cases;
        std::vector<std::vector<int> > deaths;
        matrix_d f;
        std::vector<matrix_d> X;
        std::vector<int> EpidemicStart;
        std::vector<double> pop;
        std::vector<double> SI;
        vector_d SI_rev;
        std::vector<vector_d> f_rev;
public:
    model_icl_general_speed2(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_icl_general_speed2(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_icl_general_speed2_namespace::model_icl_general_speed2";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 91;
            context__.validate_dims("data initialization", "M", "int", context__.to_vec());
            M = int(0);
            vals_i__ = context__.vals_i("M");
            pos__ = 0;
            M = vals_i__[pos__++];
            check_greater_or_equal(function__, "M", M, 1);
            current_statement_begin__ = 92;
            context__.validate_dims("data initialization", "P", "int", context__.to_vec());
            P = int(0);
            vals_i__ = context__.vals_i("P");
            pos__ = 0;
            P = vals_i__[pos__++];
            check_greater_or_equal(function__, "P", P, 1);
            current_statement_begin__ = 93;
            context__.validate_dims("data initialization", "N0", "int", context__.to_vec());
            N0 = int(0);
            vals_i__ = context__.vals_i("N0");
            pos__ = 0;
            N0 = vals_i__[pos__++];
            check_greater_or_equal(function__, "N0", N0, 1);
            current_statement_begin__ = 94;
            validate_non_negative_index("N", "M", M);
            context__.validate_dims("data initialization", "N", "int", context__.to_vec(M));
            N = std::vector<int>(M, int(0));
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            size_t N_k_0_max__ = M;
            for (size_t k_0__ = 0; k_0__ < N_k_0_max__; ++k_0__) {
                N[k_0__] = vals_i__[pos__++];
            }
            size_t N_i_0_max__ = M;
            for (size_t i_0__ = 0; i_0__ < N_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "N[i_0__]", N[i_0__], 1);
            }
            current_statement_begin__ = 95;
            context__.validate_dims("data initialization", "N2", "int", context__.to_vec());
            N2 = int(0);
            vals_i__ = context__.vals_i("N2");
            pos__ = 0;
            N2 = vals_i__[pos__++];
            check_greater_or_equal(function__, "N2", N2, 1);
            current_statement_begin__ = 96;
            validate_non_negative_index("cases", "N2", N2);
            validate_non_negative_index("cases", "M", M);
            context__.validate_dims("data initialization", "cases", "int", context__.to_vec(N2,M));
            cases = std::vector<std::vector<int> >(N2, std::vector<int>(M, int(0)));
            vals_i__ = context__.vals_i("cases");
            pos__ = 0;
            size_t cases_k_0_max__ = N2;
            size_t cases_k_1_max__ = M;
            for (size_t k_1__ = 0; k_1__ < cases_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < cases_k_0_max__; ++k_0__) {
                    cases[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 97;
            validate_non_negative_index("deaths", "N2", N2);
            validate_non_negative_index("deaths", "M", M);
            context__.validate_dims("data initialization", "deaths", "int", context__.to_vec(N2,M));
            deaths = std::vector<std::vector<int> >(N2, std::vector<int>(M, int(0)));
            vals_i__ = context__.vals_i("deaths");
            pos__ = 0;
            size_t deaths_k_0_max__ = N2;
            size_t deaths_k_1_max__ = M;
            for (size_t k_1__ = 0; k_1__ < deaths_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < deaths_k_0_max__; ++k_0__) {
                    deaths[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 98;
            validate_non_negative_index("f", "N2", N2);
            validate_non_negative_index("f", "M", M);
            context__.validate_dims("data initialization", "f", "matrix_d", context__.to_vec(N2,M));
            f = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N2, M);
            vals_r__ = context__.vals_r("f");
            pos__ = 0;
            size_t f_j_2_max__ = M;
            size_t f_j_1_max__ = N2;
            for (size_t j_2__ = 0; j_2__ < f_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < f_j_1_max__; ++j_1__) {
                    f(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 99;
            validate_non_negative_index("X", "N2", N2);
            validate_non_negative_index("X", "P", P);
            validate_non_negative_index("X", "M", M);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(M,N2,P));
            X = std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >(M, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N2, P));
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_2_max__ = P;
            size_t X_j_1_max__ = N2;
            size_t X_k_0_max__ = M;
            for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < X_k_0_max__; ++k_0__) {
                        X[k_0__](j_1__, j_2__) = vals_r__[pos__++];
                    }
                }
            }
            current_statement_begin__ = 100;
            validate_non_negative_index("EpidemicStart", "M", M);
            context__.validate_dims("data initialization", "EpidemicStart", "int", context__.to_vec(M));
            EpidemicStart = std::vector<int>(M, int(0));
            vals_i__ = context__.vals_i("EpidemicStart");
            pos__ = 0;
            size_t EpidemicStart_k_0_max__ = M;
            for (size_t k_0__ = 0; k_0__ < EpidemicStart_k_0_max__; ++k_0__) {
                EpidemicStart[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 101;
            validate_non_negative_index("pop", "M", M);
            context__.validate_dims("data initialization", "pop", "double", context__.to_vec(M));
            pop = std::vector<double>(M, double(0));
            vals_r__ = context__.vals_r("pop");
            pos__ = 0;
            size_t pop_k_0_max__ = M;
            for (size_t k_0__ = 0; k_0__ < pop_k_0_max__; ++k_0__) {
                pop[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 102;
            validate_non_negative_index("SI", "N2", N2);
            context__.validate_dims("data initialization", "SI", "double", context__.to_vec(N2));
            SI = std::vector<double>(N2, double(0));
            vals_r__ = context__.vals_r("SI");
            pos__ = 0;
            size_t SI_k_0_max__ = N2;
            for (size_t k_0__ = 0; k_0__ < SI_k_0_max__; ++k_0__) {
                SI[k_0__] = vals_r__[pos__++];
            }
            // initialize transformed data variables
            current_statement_begin__ = 106;
            validate_non_negative_index("SI_rev", "N2", N2);
            SI_rev = Eigen::Matrix<double, Eigen::Dynamic, 1>(N2);
            stan::math::fill(SI_rev, DUMMY_VAR__);
            current_statement_begin__ = 107;
            validate_non_negative_index("f_rev", "N2", N2);
            validate_non_negative_index("f_rev", "M", M);
            f_rev = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(M, Eigen::Matrix<double, Eigen::Dynamic, 1>(N2));
            stan::math::fill(f_rev, DUMMY_VAR__);
            // execute transformed data statements
            current_statement_begin__ = 109;
            for (int i = 1; i <= N2; ++i) {
                current_statement_begin__ = 110;
                stan::model::assign(SI_rev, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(SI, ((N2 - i) + 1), "SI", 1), 
                            "assigning variable SI_rev");
            }
            current_statement_begin__ = 112;
            for (int m = 1; m <= M; ++m) {
                current_statement_begin__ = 113;
                for (int i = 1; i <= N2; ++i) {
                    current_statement_begin__ = 114;
                    stan::model::assign(f_rev, 
                                stan::model::cons_list(stan::model::index_uni(m), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                get_base1(f, ((N2 - i) + 1), m, "f", 1), 
                                "assigning variable f_rev");
                }
            }
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 121;
            validate_non_negative_index("mu", "M", M);
            num_params_r__ += (1 * M);
            current_statement_begin__ = 122;
            validate_non_negative_index("alpha_hier", "P", P);
            num_params_r__ += (1 * P);
            current_statement_begin__ = 123;
            num_params_r__ += 1;
            current_statement_begin__ = 124;
            validate_non_negative_index("y", "M", M);
            num_params_r__ += (1 * M);
            current_statement_begin__ = 125;
            num_params_r__ += 1;
            current_statement_begin__ = 126;
            num_params_r__ += 1;
            current_statement_begin__ = 127;
            validate_non_negative_index("ifr_noise", "M", M);
            num_params_r__ += (1 * M);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_icl_general_speed2() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 121;
        if (!(context__.contains_r("mu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu");
        pos__ = 0U;
        validate_non_negative_index("mu", "M", M);
        context__.validate_dims("parameter initialization", "mu", "double", context__.to_vec(M));
        std::vector<double> mu(M, double(0));
        size_t mu_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < mu_k_0_max__; ++k_0__) {
            mu[k_0__] = vals_r__[pos__++];
        }
        size_t mu_i_0_max__ = M;
        for (size_t i_0__ = 0; i_0__ < mu_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, mu[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 122;
        if (!(context__.contains_r("alpha_hier")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha_hier missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha_hier");
        pos__ = 0U;
        validate_non_negative_index("alpha_hier", "P", P);
        context__.validate_dims("parameter initialization", "alpha_hier", "double", context__.to_vec(P));
        std::vector<double> alpha_hier(P, double(0));
        size_t alpha_hier_k_0_max__ = P;
        for (size_t k_0__ = 0; k_0__ < alpha_hier_k_0_max__; ++k_0__) {
            alpha_hier[k_0__] = vals_r__[pos__++];
        }
        size_t alpha_hier_i_0_max__ = P;
        for (size_t i_0__ = 0; i_0__ < alpha_hier_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, alpha_hier[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha_hier: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 123;
        if (!(context__.contains_r("kappa")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable kappa missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("kappa");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "kappa", "double", context__.to_vec());
        double kappa(0);
        kappa = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, kappa);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable kappa: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 124;
        if (!(context__.contains_r("y")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable y missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("y");
        pos__ = 0U;
        validate_non_negative_index("y", "M", M);
        context__.validate_dims("parameter initialization", "y", "double", context__.to_vec(M));
        std::vector<double> y(M, double(0));
        size_t y_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
            y[k_0__] = vals_r__[pos__++];
        }
        size_t y_i_0_max__ = M;
        for (size_t i_0__ = 0; i_0__ < y_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, y[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable y: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 125;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "phi", "double", context__.to_vec());
        double phi(0);
        phi = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, phi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 126;
        if (!(context__.contains_r("tau")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "tau", "double", context__.to_vec());
        double tau(0);
        tau = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, tau);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 127;
        if (!(context__.contains_r("ifr_noise")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable ifr_noise missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("ifr_noise");
        pos__ = 0U;
        validate_non_negative_index("ifr_noise", "M", M);
        context__.validate_dims("parameter initialization", "ifr_noise", "double", context__.to_vec(M));
        std::vector<double> ifr_noise(M, double(0));
        size_t ifr_noise_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < ifr_noise_k_0_max__; ++k_0__) {
            ifr_noise[k_0__] = vals_r__[pos__++];
        }
        size_t ifr_noise_i_0_max__ = M;
        for (size_t i_0__ = 0; i_0__ < ifr_noise_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, ifr_noise[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable ifr_noise: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 121;
            std::vector<local_scalar_t__> mu;
            size_t mu_d_0_max__ = M;
            mu.reserve(mu_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < mu_d_0_max__; ++d_0__) {
                if (jacobian__)
                    mu.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    mu.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 122;
            std::vector<local_scalar_t__> alpha_hier;
            size_t alpha_hier_d_0_max__ = P;
            alpha_hier.reserve(alpha_hier_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < alpha_hier_d_0_max__; ++d_0__) {
                if (jacobian__)
                    alpha_hier.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    alpha_hier.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 123;
            local_scalar_t__ kappa;
            (void) kappa;  // dummy to suppress unused var warning
            if (jacobian__)
                kappa = in__.scalar_lb_constrain(0, lp__);
            else
                kappa = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 124;
            std::vector<local_scalar_t__> y;
            size_t y_d_0_max__ = M;
            y.reserve(y_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < y_d_0_max__; ++d_0__) {
                if (jacobian__)
                    y.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    y.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 125;
            local_scalar_t__ phi;
            (void) phi;  // dummy to suppress unused var warning
            if (jacobian__)
                phi = in__.scalar_lb_constrain(0, lp__);
            else
                phi = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 126;
            local_scalar_t__ tau;
            (void) tau;  // dummy to suppress unused var warning
            if (jacobian__)
                tau = in__.scalar_lb_constrain(0, lp__);
            else
                tau = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 127;
            std::vector<local_scalar_t__> ifr_noise;
            size_t ifr_noise_d_0_max__ = M;
            ifr_noise.reserve(ifr_noise_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < ifr_noise_d_0_max__; ++d_0__) {
                if (jacobian__)
                    ifr_noise.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    ifr_noise.push_back(in__.scalar_lb_constrain(0));
            }
            // transformed parameters
            current_statement_begin__ = 131;
            validate_non_negative_index("alpha", "P", P);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha(P);
            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 132;
            for (int i = 1; i <= P; ++i) {
                current_statement_begin__ = 133;
                stan::model::assign(alpha, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(alpha_hier, i, "alpha_hier", 1) - (stan::math::log(1.05) / 6.0)), 
                            "assigning variable alpha");
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 131;
            size_t alpha_j_1_max__ = P;
            for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(alpha(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: alpha" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable alpha: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 138;
            lp_accum__.add(exponential_log<propto__>(tau, 0.03));
            current_statement_begin__ = 139;
            for (int m = 1; m <= M; ++m) {
                current_statement_begin__ = 140;
                lp_accum__.add(exponential_log<propto__>(get_base1(y, m, "y", 1), (1 / tau)));
            }
            current_statement_begin__ = 142;
            lp_accum__.add(normal_log<propto__>(phi, 0, 5));
            current_statement_begin__ = 143;
            lp_accum__.add(normal_log<propto__>(kappa, 0, 0.5));
            current_statement_begin__ = 144;
            lp_accum__.add(normal_log<propto__>(mu, 3.28, kappa));
            current_statement_begin__ = 145;
            lp_accum__.add(gamma_log<propto__>(alpha_hier, .1667, 1));
            current_statement_begin__ = 146;
            lp_accum__.add(normal_log<propto__>(ifr_noise, 1, 0.1));
            current_statement_begin__ = 178;
            lp_accum__.add(country_lpdf(mu, 1, M, alpha, y, phi, ifr_noise, N, N0, N2, X, SI_rev, pop, f_rev, deaths, EpidemicStart, pstream__));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("mu");
        names__.push_back("alpha_hier");
        names__.push_back("kappa");
        names__.push_back("y");
        names__.push_back("phi");
        names__.push_back("tau");
        names__.push_back("ifr_noise");
        names__.push_back("alpha");
        names__.push_back("E_deaths");
        names__.push_back("prediction");
        names__.push_back("Rt");
        names__.push_back("Rt_adj");
        names__.push_back("E_deaths0");
        names__.push_back("prediction0");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N2);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N2);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N2);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N2);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N2);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N2);
        dims__.push_back(M);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_icl_general_speed2_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> mu;
        size_t mu_d_0_max__ = M;
        mu.reserve(mu_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < mu_d_0_max__; ++d_0__) {
            mu.push_back(in__.scalar_lb_constrain(0));
        }
        size_t mu_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < mu_k_0_max__; ++k_0__) {
            vars__.push_back(mu[k_0__]);
        }
        std::vector<double> alpha_hier;
        size_t alpha_hier_d_0_max__ = P;
        alpha_hier.reserve(alpha_hier_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < alpha_hier_d_0_max__; ++d_0__) {
            alpha_hier.push_back(in__.scalar_lb_constrain(0));
        }
        size_t alpha_hier_k_0_max__ = P;
        for (size_t k_0__ = 0; k_0__ < alpha_hier_k_0_max__; ++k_0__) {
            vars__.push_back(alpha_hier[k_0__]);
        }
        double kappa = in__.scalar_lb_constrain(0);
        vars__.push_back(kappa);
        std::vector<double> y;
        size_t y_d_0_max__ = M;
        y.reserve(y_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < y_d_0_max__; ++d_0__) {
            y.push_back(in__.scalar_lb_constrain(0));
        }
        size_t y_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
            vars__.push_back(y[k_0__]);
        }
        double phi = in__.scalar_lb_constrain(0);
        vars__.push_back(phi);
        double tau = in__.scalar_lb_constrain(0);
        vars__.push_back(tau);
        std::vector<double> ifr_noise;
        size_t ifr_noise_d_0_max__ = M;
        ifr_noise.reserve(ifr_noise_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < ifr_noise_d_0_max__; ++d_0__) {
            ifr_noise.push_back(in__.scalar_lb_constrain(0));
        }
        size_t ifr_noise_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < ifr_noise_k_0_max__; ++k_0__) {
            vars__.push_back(ifr_noise[k_0__]);
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 131;
            validate_non_negative_index("alpha", "P", P);
            Eigen::Matrix<double, Eigen::Dynamic, 1> alpha(P);
            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 132;
            for (int i = 1; i <= P; ++i) {
                current_statement_begin__ = 133;
                stan::model::assign(alpha, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(alpha_hier, i, "alpha_hier", 1) - (stan::math::log(1.05) / 6.0)), 
                            "assigning variable alpha");
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t alpha_j_1_max__ = P;
                for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
                    vars__.push_back(alpha(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 196;
            validate_non_negative_index("E_deaths", "N2", N2);
            validate_non_negative_index("E_deaths", "M", M);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> E_deaths(N2, M);
            stan::math::initialize(E_deaths, DUMMY_VAR__);
            stan::math::fill(E_deaths, DUMMY_VAR__);
            current_statement_begin__ = 197;
            validate_non_negative_index("prediction", "N2", N2);
            validate_non_negative_index("prediction", "M", M);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> prediction(N2, M);
            stan::math::initialize(prediction, DUMMY_VAR__);
            stan::math::fill(prediction, DUMMY_VAR__);
            current_statement_begin__ = 198;
            validate_non_negative_index("Rt", "N2", N2);
            validate_non_negative_index("Rt", "M", M);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Rt(N2, M);
            stan::math::initialize(Rt, DUMMY_VAR__);
            stan::math::fill(Rt, DUMMY_VAR__);
            current_statement_begin__ = 199;
            validate_non_negative_index("Rt_adj", "N2", N2);
            validate_non_negative_index("Rt_adj", "M", M);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Rt_adj(N2, M);
            stan::math::initialize(Rt_adj, DUMMY_VAR__);
            stan::math::fill(Rt_adj, DUMMY_VAR__);
            current_statement_begin__ = 200;
            validate_non_negative_index("E_deaths0", "N2", N2);
            validate_non_negative_index("E_deaths0", "M", M);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> E_deaths0(N2, M);
            stan::math::initialize(E_deaths0, DUMMY_VAR__);
            stan::math::fill(E_deaths0, DUMMY_VAR__);
            current_statement_begin__ = 201;
            validate_non_negative_index("prediction0", "N2", N2);
            validate_non_negative_index("prediction0", "M", M);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> prediction0(N2, M);
            stan::math::initialize(prediction0, DUMMY_VAR__);
            stan::math::fill(prediction0, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 203;
            for (int m = 1; m <= M; ++m) {
                {
                current_statement_begin__ = 204;
                validate_non_negative_index("local", "N2", N2);
                validate_non_negative_index("local", "4", 4);
                std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > local(4, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(N2));
                stan::math::initialize(local, DUMMY_VAR__);
                stan::math::fill(local, DUMMY_VAR__);
                stan::math::assign(local,country_model(get_base1(mu, m, "mu", 1), alpha, get_base1(y, m, "y", 1), get_base1(ifr_noise, m, "ifr_noise", 1), N0, N2, get_base1(X, m, "X", 1), SI_rev, get_base1(pop, m, "pop", 1), get_base1(f_rev, m, "f_rev", 1), pstream__));
                current_statement_begin__ = 216;
                validate_non_negative_index("local0", "N2", N2);
                validate_non_negative_index("local0", "4", 4);
                std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > local0(4, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(N2));
                stan::math::initialize(local0, DUMMY_VAR__);
                stan::math::fill(local0, DUMMY_VAR__);
                stan::math::assign(local0,country_model(get_base1(mu, m, "mu", 1), alpha, get_base1(y, m, "y", 1), get_base1(ifr_noise, m, "ifr_noise", 1), N0, N2, get_base1(X, m, "X", 1), SI_rev, get_base1(pop, m, "pop", 1), get_base1(f_rev, m, "f_rev", 1), pstream__));
                current_statement_begin__ = 229;
                stan::model::assign(E_deaths, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                            get_base1(local, 1, "local", 1), 
                            "assigning variable E_deaths");
                current_statement_begin__ = 230;
                stan::model::assign(prediction, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                            get_base1(local, 2, "local", 1), 
                            "assigning variable prediction");
                current_statement_begin__ = 231;
                stan::model::assign(Rt, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                            get_base1(local, 3, "local", 1), 
                            "assigning variable Rt");
                current_statement_begin__ = 232;
                stan::model::assign(Rt_adj, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                            get_base1(local, 4, "local", 1), 
                            "assigning variable Rt_adj");
                current_statement_begin__ = 234;
                stan::model::assign(E_deaths0, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                            get_base1(local0, 1, "local0", 1), 
                            "assigning variable E_deaths0");
                current_statement_begin__ = 235;
                stan::model::assign(prediction0, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                            get_base1(local0, 2, "local0", 1), 
                            "assigning variable prediction0");
                }
            }
            // validate, write generated quantities
            current_statement_begin__ = 196;
            size_t E_deaths_j_2_max__ = M;
            size_t E_deaths_j_1_max__ = N2;
            for (size_t j_2__ = 0; j_2__ < E_deaths_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < E_deaths_j_1_max__; ++j_1__) {
                    vars__.push_back(E_deaths(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 197;
            size_t prediction_j_2_max__ = M;
            size_t prediction_j_1_max__ = N2;
            for (size_t j_2__ = 0; j_2__ < prediction_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < prediction_j_1_max__; ++j_1__) {
                    vars__.push_back(prediction(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 198;
            size_t Rt_j_2_max__ = M;
            size_t Rt_j_1_max__ = N2;
            for (size_t j_2__ = 0; j_2__ < Rt_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Rt_j_1_max__; ++j_1__) {
                    vars__.push_back(Rt(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 199;
            size_t Rt_adj_j_2_max__ = M;
            size_t Rt_adj_j_1_max__ = N2;
            for (size_t j_2__ = 0; j_2__ < Rt_adj_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Rt_adj_j_1_max__; ++j_1__) {
                    vars__.push_back(Rt_adj(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 200;
            size_t E_deaths0_j_2_max__ = M;
            size_t E_deaths0_j_1_max__ = N2;
            for (size_t j_2__ = 0; j_2__ < E_deaths0_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < E_deaths0_j_1_max__; ++j_1__) {
                    vars__.push_back(E_deaths0(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 201;
            size_t prediction0_j_2_max__ = M;
            size_t prediction0_j_1_max__ = N2;
            for (size_t j_2__ = 0; j_2__ < prediction0_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < prediction0_j_1_max__; ++j_1__) {
                    vars__.push_back(prediction0(j_1__, j_2__));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_icl_general_speed2";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t mu_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < mu_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_hier_k_0_max__ = P;
        for (size_t k_0__ = 0; k_0__ < alpha_hier_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_hier" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "kappa";
        param_names__.push_back(param_name_stream__.str());
        size_t y_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());
        size_t ifr_noise_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < ifr_noise_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ifr_noise" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t alpha_j_1_max__ = P;
            for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t E_deaths_j_2_max__ = M;
        size_t E_deaths_j_1_max__ = N2;
        for (size_t j_2__ = 0; j_2__ < E_deaths_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < E_deaths_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "E_deaths" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t prediction_j_2_max__ = M;
        size_t prediction_j_1_max__ = N2;
        for (size_t j_2__ = 0; j_2__ < prediction_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < prediction_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prediction" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Rt_j_2_max__ = M;
        size_t Rt_j_1_max__ = N2;
        for (size_t j_2__ = 0; j_2__ < Rt_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Rt_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Rt" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Rt_adj_j_2_max__ = M;
        size_t Rt_adj_j_1_max__ = N2;
        for (size_t j_2__ = 0; j_2__ < Rt_adj_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Rt_adj_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Rt_adj" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t E_deaths0_j_2_max__ = M;
        size_t E_deaths0_j_1_max__ = N2;
        for (size_t j_2__ = 0; j_2__ < E_deaths0_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < E_deaths0_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "E_deaths0" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t prediction0_j_2_max__ = M;
        size_t prediction0_j_1_max__ = N2;
        for (size_t j_2__ = 0; j_2__ < prediction0_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < prediction0_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prediction0" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t mu_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < mu_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_hier_k_0_max__ = P;
        for (size_t k_0__ = 0; k_0__ < alpha_hier_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_hier" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "kappa";
        param_names__.push_back(param_name_stream__.str());
        size_t y_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());
        size_t ifr_noise_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < ifr_noise_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ifr_noise" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t alpha_j_1_max__ = P;
            for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t E_deaths_j_2_max__ = M;
        size_t E_deaths_j_1_max__ = N2;
        for (size_t j_2__ = 0; j_2__ < E_deaths_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < E_deaths_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "E_deaths" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t prediction_j_2_max__ = M;
        size_t prediction_j_1_max__ = N2;
        for (size_t j_2__ = 0; j_2__ < prediction_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < prediction_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prediction" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Rt_j_2_max__ = M;
        size_t Rt_j_1_max__ = N2;
        for (size_t j_2__ = 0; j_2__ < Rt_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Rt_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Rt" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Rt_adj_j_2_max__ = M;
        size_t Rt_adj_j_1_max__ = N2;
        for (size_t j_2__ = 0; j_2__ < Rt_adj_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Rt_adj_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Rt_adj" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t E_deaths0_j_2_max__ = M;
        size_t E_deaths0_j_1_max__ = N2;
        for (size_t j_2__ = 0; j_2__ < E_deaths0_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < E_deaths0_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "E_deaths0" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t prediction0_j_2_max__ = M;
        size_t prediction0_j_1_max__ = N2;
        for (size_t j_2__ = 0; j_2__ < prediction0_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < prediction0_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prediction0" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
}; // model
}  // namespace
typedef model_icl_general_speed2_namespace::model_icl_general_speed2 stan_model;
#endif
